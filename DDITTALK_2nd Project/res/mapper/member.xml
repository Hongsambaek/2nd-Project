<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper   PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="member">
	<resultMap type="VO.MemberVO" id="memberMap">
		<id column="MEM_EMAIL" property="memEmail"/>
		<result column="MEM_PASS" property="memPass"/>
		<result column="MEM_TAG" property="memTag"/>
		<result column="MEM_NICKNAME" property="memNickname"/>
		<result column="MEM_TEL" property="memTel"/>
		<result column="MEM_ADDR" property="memAddr"/>
		<result column="MEM_SCHOOL" property="memSchool"/>
		<result column="MEM_DELETE" property="memDelete"/>
		<result column="MEM_COIN" property="memCoin"/>
		<result column="MEM_DATE" property="memDate"/>
		<result column="MEM_NAME" property="memName"/>
		<result column="MEM_PROFILE" property="memProfile"/>
	</resultMap>

	<!-- 
	
		이 영역에 SQL문에 맞는 태그를 사용하여 SQL문을 기술한다.
		
		사용할 수 있는 기본적인 태그들
		
		<select> ~~~ </select>
		<insert> ~~~ </insert>
		<update> ~~~ </update>
		<delete> ~~~ </delete>
		
		위에 태그에서 사용되는 주요 속성들
		1) id(필수값)		 : 해당 SQL문을 호출할 때 namespace 값과 연결하여 사용하는 쿼리이름
		
		
		2) parameterType : SQL문에 사용될 데이터를 담은 객체타입을 지정한다. =생략가능
							(보통 VO클래스, 자바의 기본타입명 등이 사용된다.)
							
		3) resultType : select문을 실행한 결과를 담기위한 객체타입을 지정한다.
							(보통 VO클래스, 자바의 기본타입명 등	이 사용된다.)
							
		4) resultMap : 결과 레코드 컬럼명과 VO 객체의  속성명이 다를 경우에 적절한 대핑작업을 위해 사용한다.
			
	-->
	<insert id="insertMember" parameterType = "VO.MemberVO">
	
	    insert into member( 
		MEM_NAME,
		MEM_TEL,
		MEM_EMAIL,
		MEM_PASS,
		MEM_TAG,
		MEM_POST,
		MEM_ADDR,
		MEM_SCHOOL,
		MEM_NICKNAME
		) values (
		#{memName}, #{memTel}, #{memEmail}, #{memPass}, #{memTag}, #{memPost}, #{memAddr}, #{memSchool}, #{memNickname})

	
	</insert>
	
	<update id="updateMember" parameterType = "VO.MemberVO">
	
      update member set 
      MEM_PASS = #{memPass},
      MEM_TAG = #{memTag},
      MEM_NICKNAME = #{memNickname},
      MEM_TEL = #{memTel} ,
      MEM_POST = #{memPost},
      MEM_ADDR = #{memAddr} ,
      MEM_SCHOOL = #{memSchool} ,
      MEM_PROFILE = #{memProfile}
      where mem_Email = #{memEmail}

	</update>

	<delete id="deleteMember" parameterType = "VO.MemberVO">
	 update member set 
	 MEM_DELETE = 'Y'
	 where MEM_EMAIL = #{memEmail} AND MEM_PASS = #{memPass}
	 
	</delete>
	
	<select id="selectAllMember" resultType = "VO.MemberVO">
	

      SELECT 
		MEM_EMAIL AS memEmail,
		MEM_PASS AS memPass ,
		MEM_TAG AS memTag,
		MEM_NICKNAME AS memNickname,
		MEM_TEL AS memTel,
		MEM_ADDR AS memAddr,
		MEM_SCHOOL AS memSchool,
		MEM_DELETE AS memDelete,
		MEM_COIN AS memCoin,
		MEM_DATE AS memDate
		FROM MEMBER

	
	</select>
	
	<select id="getTag" resultMap = "memberMap" resultType = "VO.MemberVO">
		select mem_tag, mem_email, mem_name
        from member 
	</select>
	
	
	<select id="getMember" resultMap = "memberMap" resultType = "VO.MemberVO" >
	
		SELECT *
		FROM MEMBER
		WHERE MEM_EMAIL = #{memEmail} AND MEM_DELETE = 'N'

	</select>
	
	<select id="searchMember" resultType = "VO.MemberVO">
	
      select mem_id memId, mem_name memName, mem_tel memTel, mem_addr memAddr, reg_dt regDt, atch_file_id atchFileId from member


	<where>
	<if test='memId != null and memId != ""'>
	AND MEM_ID = #{memId}
	</if>
	<if test='memName != null and memName != ""'>
	AND MEM_NAME = #{memName}
	</if>
	<if test='memTel != null and !memTel.equals("")'>
	AND MEM_TEL = #{memTel}
	</if>
	<if test='memAddr != null and memAddr != ""'>
	AND MEM_ADDR LIKE '%'|| #{memAddr} ||'%'
	</if>
	
	</where>
	
	</select>
	
	<select id="checkMember" resultType = "int">
	 SELECT count(*) as cnt
	 FROM member 
	 WHERE MEM_ID = #{memId} and mem_pass = #{memPass}
	</select>
	
	
	<select id="findIdMember" resultType = "String">
	 SELECT MEM_EMAIL as memEmail
	 FROM member 
	 WHERE MEM_TEL = #{memTel} and MEM_NAME = #{memName}
	</select>
	
	<select id="findUpdatePass" resultType = "int">
	
		update member set 
	   mem_Pass = #{memPass}
	   where 
	   mem_Email = #{memEmail} and mem_Name = #{memName} and mem_Tel = #{memTel}
	   
	</select>
	
	
</mapper>